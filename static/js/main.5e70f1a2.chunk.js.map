{"version":3,"sources":["App.js","index.js"],"names":["audio","document","getElementById","App","props","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","count","minutes","Math","floor","seconds","handleLengthChange","timerType","newCount","toLowerCase","undefined","this","breakProps","title","handleDecrease","handleIncrease","sessionProps","className","id","onClick","React","Component","SetTimer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5e70f1a2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { FaMinus, FaPlus, FaPlay, FaPause, FaUndo } from \"react-icons/fa\";\n\nconst audio = document.getElementById('beep');\nclass App extends React.Component {\n  state = {\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25 * 60,\n    currentTimer: 'Session',\n    isPlaying: false\n  }\n\n  constructor(props) {\n    super(props);\n    this.loop = undefined;\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state;\n    \n    if(isPlaying) {\n      clearInterval(this.loop);\n      \n      this.setState({\n        isPlaying: false\n      });\n    } else {\n      this.setState({\n        isPlaying: true\n      });\n\n      this.loop = setInterval(() => {\n        const { \n          clockCount, \n          currentTimer, \n          breakCount, \n          sessionCount \n        } = this.state;\n        \n        if(clockCount === 0) {\n          audio.play();\n          this.setState({\n            currentTimer: (currentTimer === 'Session') ? 'Break' : 'Session',\n            clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\n          });\n          \n         \n        } else {\n          this.setState({\n            clockCount: clockCount - 1\n          });\n        }\n        \n      }, 1000);\n    }\n  }\n  \n  handleReset = () => {\n    this.setState({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: 'Session',\n      isPlaying: false\n    });\n    \n    clearInterval(this.loop);\n    \n    audio.pause();\n    audio.currentTime = 0;\n  }\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n      \n    minutes = minutes < 10 ? ('0'+minutes) : minutes;\n    seconds = seconds < 10 ? ('0'+seconds) : seconds;\n    \n    return `${minutes}:${seconds}`;\n  }\n  \n  handleLengthChange = (count, timerType) => {\n    const { \n      sessionCount, \n      breakCount, \n      isPlaying, \n      currentTimer\n    } = this.state;\n    \n    let newCount;\n    \n    if(timerType === 'session') {\n      newCount = sessionCount + count;\n    } else {\n      newCount = breakCount + count;\n    }\n    \n    if(newCount > 0 && newCount < 61 && !isPlaying) {\n      this.setState({\n        [`${timerType}Count`]: newCount\n      });\n      \n      if(currentTimer.toLowerCase() === timerType) {\n        this.setState({\n          clockCount: newCount * 60\n        })\n      }\n    }\n  }\n  \n\n  render() {\n    const { \n      breakCount, \n      sessionCount, \n      clockCount, \n      currentTimer,\n      isPlaying\n    } = this.state;\n    \n    const breakProps = {\n      title: 'Break',\n      count: breakCount,\n      handleDecrease: () => this.handleLengthChange(-1, 'break'),\n      handleIncrease: () => this.handleLengthChange(1, 'break')\n    }\n    \n    const sessionProps = {\n      title: 'Session',\n      count: sessionCount,\n      handleDecrease: () => this.handleLengthChange(-1, 'session'),\n      handleIncrease: () => this.handleLengthChange(1, 'session'),\n    }\n    \n    return (\n      <div className=\"main-container\">\n        <div className=\"flex\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps} />\n        </div>\n        \n        <div className=\"clock-container\">\n          <h1 id=\"timer-label\">{currentTimer}</h1>\n          <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\n          \n          \n          <div className=\"flex\">\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\n              <FaPlay />\n              <FaPause />\n              \n            </button>\n            <button id=\"reset\" onClick={this.handleReset}>\n              <FaUndo />\n            </button>\n          </div>\n        </div>\n        \n      </div>);\n  }\n}\n\nconst SetTimer = (props) => {\n  const id = props.title.toLowerCase();\n  \n  return (\n    <div className=\"timer-container\">\n      <h2 id={`${id}-label`}>\n        {props.title} Length\n      </h2>\n      <div className=\"flex actions-wrapper\">\n        <button id={`${id}-decrement`} onClick={props.handleDecrease}>\n          <FaMinus />\n        </button>\n        \n        <span id={`${id}-length`}>{props.count}</span>\n        \n        <button id={`${id}-increment`} onClick={props.handleIncrease}>\n          <FaPlus />\n        </button>\n      </div>\n    </div>\n  );\n  }\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}